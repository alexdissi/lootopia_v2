// === AUTH CORE ===
generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(cuid())
  name               String?
  email              String
  emailVerified      Boolean
  image              String?
  stripeCustomerId   String?
  createdAt          DateTime
  updatedAt          DateTime
  sessions           Session[]
  accounts           Account[]
  nickname           String?
  twoFactorEnabled   Boolean              @default(false)
  role               UserRole             @default(PLAYER)
  participations     Participation[]
  createdChasses     TreasureHunt[]       @relation("CreatedByUser")
  collectedArtefacts Artefact[]           @relation("CollectedByUser")
  virtualCurrency    VirtualCurrency[]
  transactionHistory TransactionHistory[]
  Craft              Craft[]
  LeaderboardEntry   LeaderboardEntry[]
  items              UserItem[]
  twoFactor          TwoFactor[]
  reviews            Review[]

  @@unique([email])
  @@map("user")
}

enum UserRole {
  PLAYER
  ORGANIZER
  ADMIN
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Review {
  id           String       @id @default(cuid())
  userId       String
  huntId       String
  comment      String
  score        Int
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  treasureHunt TreasureHunt @relation(fields: [huntId], references: [id])

  @@map("review")
}

model TreasureHunt {
  id          String    @id @default(cuid())
  title       String
  description String?
  createdBy   User      @relation("CreatedByUser", fields: [createdById], references: [id], onDelete: Cascade)
  createdById String
  startDate   DateTime?
  endDate     DateTime?
  location    String?
  mode        HuntMode  @default(PUBLIC)
  fee         Int?
  mapStyle    String?
  isFinished  Boolean   @default(false)

  status           HuntStatus         @default(PENDING)
  participants     Participation[]
  steps            HuntStep[]
  rewards          Reward[]
  artefacts        Artefact[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  LeaderboardEntry LeaderboardEntry[]
  reviews          Review[]
}

enum HuntMode {
  PUBLIC
  PRIVATE
}

enum HuntStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Participation {
  id           String              @id @default(cuid())
  userId       String
  huntId       String
  status       ParticipationStatus @default(ONGOING)
  joinDate     DateTime            @default(now())
  user         User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  treasureHunt TreasureHunt        @relation(fields: [huntId], references: [id])
}

enum ParticipationStatus {
  ONGOING
  COMPLETED
  ABANDONED
}

model Artefact {
  id            String          @id @default(cuid())
  name          String
  rarity        ArtefactRarity
  description   String?
  imageUrl      String?
  isHidden      Boolean         @default(false)
  source        ArtefactSource
  userId        String
  user          User            @relation("CollectedByUser", fields: [userId], references: [id], onDelete: Cascade)
  huntId        String?
  hunt          TreasureHunt?   @relation(fields: [huntId], references: [id])
  foundAt       DateTime        @default(now())
  Craft         Craft[]
  CraftMaterial CraftMaterial[]
}

enum ArtefactSource {
  CACHE
  SHOP
  CRAFT
  EVENT
}

enum ArtefactRarity {
  COMMON
  RARE
  EPIC
  LEGENDARY
}

model HuntStep {
  id           String       @id @default(cuid())
  description  String
  huntId       String
  stepOrder    Int
  treasureHunt TreasureHunt @relation(fields: [huntId], references: [id])
  createdAt    DateTime     @default(now())
}

model Reward {
  id           String       @id @default(cuid())
  type         RewardType
  value        Int
  description  String?
  huntId       String
  treasureHunt TreasureHunt @relation(fields: [huntId], references: [id])
}

enum RewardType {
  VIRTUAL_CURRENCY
  ARTEFACT
  DISCOUNT
  PHYSICAL_ITEM
}

model VirtualCurrency {
  id                 String               @id @default(cuid())
  userId             String
  amount             Int
  type               CurrencySourceType   @default(EARNED)
  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  transactionHistory TransactionHistory[]
}

enum CurrencySourceType {
  EARNED
  PURCHASED
  GIFTED
}

model TransactionHistory {
  id                String          @id @default(cuid())
  userId            String
  transactionId     String          @default(cuid())
  stripeSessionId   String?         @unique
  amount            Int
  transactionType   TransactionType @default(EARNED)
  description       String?
  createdAt         DateTime        @default(now())
  virtualCurrencyId String
  virtualCurrency   VirtualCurrency @relation(fields: [virtualCurrencyId], references: [id], onDelete: Cascade)
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum TransactionType {
  EARNED
  SPENT
  BOUGHT
}

model Craft {
  id        String   @id @default(cuid())
  userId    String
  resultId  String
  createdAt DateTime @default(now())

  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  result Artefact @relation(fields: [resultId], references: [id])

  materials CraftMaterial[]
}

model CraftMaterial {
  id         String @id @default(cuid())
  craftId    String
  artefactId String

  craft    Craft    @relation(fields: [craftId], references: [id])
  artefact Artefact @relation(fields: [artefactId], references: [id])
}

model LeaderboardEntry {
  id          String   @id @default(cuid())
  userId      String
  huntId      String
  rank        Int
  score       Int
  completedAt DateTime

  user User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  hunt TreasureHunt @relation(fields: [huntId], references: [id])
}

model ShopItem {
  id          String       @id @default(cuid())
  name        String
  description String
  price       Int
  imageUrl    String?
  type        ShopItemType
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  purchases   UserItem[]
}

enum ShopItemType {
  BOOST
  COSMETIC
  HINT
  SPECIAL_ACCESS
}

model UserItem {
  id        String    @id @default(cuid())
  userId    String
  itemId    String
  quantity  Int       @default(1)
  isActive  Boolean   @default(true)
  expiresAt DateTime?
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  item      ShopItem  @relation(fields: [itemId], references: [id])
}

model TwoFactor {
  id          String @id @default(cuid())
  secret      String
  backupCodes String
  userId      String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("twoFactor")
}
